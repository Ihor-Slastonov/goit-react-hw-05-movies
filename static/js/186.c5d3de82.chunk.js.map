{"version":3,"file":"static/js/186.c5d3de82.chunk.js","mappings":"yRAOe,SAASA,IACtB,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA4BF,EAAAA,EAAAA,WAAS,GAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAsBR,OApBAE,EAAAA,EAAAA,YAAU,WAAM,wCAGd,8GAE0BC,EAAAA,EAAAA,IAAkBH,GAF5C,UAG2B,KADjBN,EAFV,QAGgBU,OAHhB,uBAIML,GAAS,GAJf,mBAKaM,EAAAA,EAAAA,IAAM,gCALnB,OAOIV,EAAWD,GAPf,kDASIY,QAAQC,IAAR,MATJ,yBAWIV,GAAU,GAXd,8EAHc,sBACdA,GAAU,GADI,mCAiBdW,EACD,GAAE,CAACR,KAGF,iCACE,wBACGN,EAAQe,KAAI,SAAAC,GAAM,OACjB,2BACE,qCAAaA,EAAOC,WACpB,uBAAID,EAAOE,YAFJF,EAAOG,GADC,MAOpBf,IAAS,gEACTF,IAAU,SAAC,IAAD,MAGhB,C,mMC7CKkB,EAAW,gCACXC,EAAU,mCAEHC,EAAgB,mCAAG,oGACPC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,sBAA2C,CAChEI,OAAQ,CACNC,QAASJ,EACTK,SAAU,WAJgB,cACxBC,EADwB,yBAOvBA,EAASC,KAAKC,SAPS,2CAAH,qDAUhBC,EAAiB,mCAAG,WAAMX,GAAN,uFACRI,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BD,GAAM,CACzDK,OAAQ,CACNC,QAASJ,EACTK,SAAU,WAJiB,cACzBC,EADyB,yBAOxBA,EAASC,MAPe,2CAAH,sDAUjBG,EAAiB,mCAAG,WAAMZ,GAAN,uFACRI,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BD,EAA9B,YAA4C,CACjEK,OAAQ,CACNC,QAASJ,EACTK,SAAU,WAJiB,cACzBC,EADyB,yBAOxBA,EAASC,KAAKI,MAPU,2CAAH,sDAUjBvB,EAAiB,mCAAG,WAAMU,GAAN,uFACRI,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BD,EAA9B,YAA4C,CACjEK,OAAQ,CACNC,QAASJ,EACTK,SAAU,WAJiB,cACzBC,EADyB,yBAOxBA,EAASC,KAAKC,SAPU,2CAAH,sDAUjBI,EAAgB,mCAAG,WAAMC,GAAN,uFACPX,EAAAA,EAAAA,IAAA,UAAaH,EAAb,gBAAqC,CAC1DI,OAAQ,CACNC,QAASJ,EACTK,SAAU,QACVQ,MAAOA,KALmB,cACxBP,EADwB,yBAQvBA,EAASC,KAAKC,SARS,2CAAH,qD","sources":["components/Reviews/Reviews.jsx","services/movieApi.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\n\nimport { Loader } from 'components/Loader/Loader';\nimport { fetchMovieReviews } from 'services/movieApi';\n\nexport default function Reviews() {\n  const [reviews, setReviews] = useState([]);\n  const [loader, setLoader] = useState(false);\n  const [error, setError] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setLoader(true);\n\n    async function fetchReviews() {\n      try {\n        const reviews = await fetchMovieReviews(movieId);\n        if (reviews.length === 0) {\n          setError(true);\n          return toast('Sorry, there are no reviews');\n        }\n        setReviews(reviews);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoader(false);\n      }\n    }\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      <ul>\n        {reviews.map(review => (\n          <li key={review.id}>\n            <h4>Author: {review.author}</h4>\n            <p>{review.content}</p>\n          </li>\n        ))}\n      </ul>\n      {error && <p>We don't have reviews for this movie</p>}\n      {loader && <Loader />}\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '2f44dbe234f7609a16da7327d83f3eb3';\n\nexport const fetchTrendMovies = async () => {\n  const response = await axios.get(`${BASE_URL}trending/movie/day`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async id => {\n  const response = await axios.get(`${BASE_URL}movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data;\n};\n\nexport const fetchMovieCredits = async id => {\n  const response = await axios.get(`${BASE_URL}movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data.cast;\n}\n\nexport const fetchMovieReviews = async id => {\n  const response = await axios.get(`${BASE_URL}movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data.results;\n}\n\nexport const fetchSearchMovie = async query => {\n  const response = await axios.get(`${BASE_URL}search/movie`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      query: query,\n    },\n  });\n  return response.data.results;\n}\n"],"names":["Reviews","useState","reviews","setReviews","loader","setLoader","error","setError","movieId","useParams","useEffect","fetchMovieReviews","length","toast","console","log","fetchReviews","map","review","author","content","id","BASE_URL","API_KEY","fetchTrendMovies","axios","params","api_key","language","response","data","results","fetchMovieDetails","fetchMovieCredits","cast","fetchSearchMovie","query"],"sourceRoot":""}