{"version":3,"file":"static/js/408.c396ec60.chunk.js","mappings":"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","sources":["components/MovieCard/MovieCard.jsx","pages/MovieDetails/MovieDetails.jsx","services/movieApi.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nexport const MovieCard = ({ poster, title, year, vote, overview, genres }) => {\n  return (\n    <div>\n      <img src={poster} alt={title} width=\"200\" />\n      <div>\n        <h2>\n          {title} ({year})\n        </h2>\n        <p>User Score: {vote}%</p>\n        <h3>Overview</h3>\n        <p>{overview}</p>\n        <h3>Genres</h3>\n        <p>{genres}</p>\n      </div>\n    </div>\n  );\n};\n\nMovieCard.propTypes = {\n  poster: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  year: PropTypes.string.isRequired,\n  vote: PropTypes.number.isRequired,\n  overview: PropTypes.string.isRequired,\n  genres: PropTypes.string.isRequired,\n};\n","import { useEffect, useState, Suspense } from 'react';\nimport { Link, Outlet, useNavigate } from 'react-router-dom';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { toast } from 'react-hot-toast';\n\nimport { MovieCard } from 'components/MovieCard/MovieCard';\nimport { Loader } from 'components/Loader/Loader';\n\nimport { fetchMovieDetails } from 'services/movieApi';\n\nexport default function MovieDetails() {\n  const [movieDetails, setMovieDetails] = useState({\n    backdrop_path: '',\n    genres: [],\n    overview: '',\n    poster_path: '',\n    release_date: '',\n    title: '',\n    vote_average: '',\n  });\n  const [loader, setLoader] = useState(true);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function fetchMovieDetailsCard() {\n      try {\n        const movieDetails = await fetchMovieDetails(movieId);\n        if (Object.keys(movieDetails).length === 0) {\n          return toast('Sorry, movie not found! Please try again later');\n        }\n        setMovieDetails(movieDetails);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoader(false);\n      }\n    }\n    fetchMovieDetailsCard();\n  }, [movieId]);\n\n  // ------ Go back button-------///\n  const location = useLocation();\n  const backLink = location.state?.from ?? '/';\n  const navigate = useNavigate();\n  const goBack = () => navigate(backLink);\n  // --------------------------////\n\n  const { poster_path, title, release_date, vote_average, overview, genres } =\n    movieDetails;\n\n  const poster = poster_path\n    ? `https://image.tmdb.org/t/p/w500${poster_path}`\n    : 'https://via.placeholder.com/300x500?text=Poster+Not+Found';\n  const releaseDate = release_date.slice(0, 4);\n  const voteAverage = Math.floor(vote_average * 10);\n  const genresStr = genres.map(genre => genre.name).join(', ');\n  return (\n    <>\n      <main>\n        <button type=\"button\" onClick={goBack}>\n          Back to\n        </button>\n        {movieDetails && (\n          <MovieCard\n            title={title}\n            year={releaseDate}\n            poster={poster}\n            vote={voteAverage}\n            overview={overview}\n            genres={genresStr}\n          />\n        )}\n\n        <h3>Additional information</h3>\n        <Link to=\"cast\">Cast</Link>\n        <Link to=\"reviews\">Reviews</Link>\n\n        <Suspense fallback={<Loader />}>\n          <Outlet />\n        </Suspense>\n      </main>\n      {loader && <Loader />}\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '2f44dbe234f7609a16da7327d83f3eb3';\n\nexport const fetchTrendMovies = async () => {\n  const response = await axios.get(`${BASE_URL}trending/movie/day`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async id => {\n  const response = await axios.get(`${BASE_URL}movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data;\n};\n\nexport const fetchMovieCredits = async id => {\n  const response = await axios.get(`${BASE_URL}movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data.cast;\n}\n\nexport const fetchMovieReviews = async id => {\n  const response = await axios.get(`${BASE_URL}movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data.results;\n}\n\nexport const fetchSearchMovie = async query => {\n  const response = await axios.get(`${BASE_URL}search/movie`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      query: query,\n    },\n  });\n  return response.data.results;\n}\n"],"names":["MovieCard","poster","title","year","vote","overview","genres","src","alt","width","MovieDetails","useState","backdrop_path","poster_path","release_date","vote_average","movieDetails","setMovieDetails","loader","setLoader","movieId","useParams","useEffect","fetchMovieDetails","Object","keys","length","toast","console","log","fetchMovieDetailsCard","backLink","useLocation","state","from","navigate","useNavigate","releaseDate","slice","voteAverage","Math","floor","genresStr","map","genre","name","join","type","onClick","to","Suspense","fallback","Loader","BASE_URL","API_KEY","fetchTrendMovies","axios","params","api_key","language","response","data","results","id","fetchMovieCredits","cast","fetchMovieReviews","fetchSearchMovie","query"],"sourceRoot":""}