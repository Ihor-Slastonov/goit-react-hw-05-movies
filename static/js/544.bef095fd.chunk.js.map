{"version":3,"file":"static/js/544.bef095fd.chunk.js","mappings":"wNAEaA,EAAOC,EAAAA,GAAAA,GAAH,2JAQJC,EAAcD,EAAAA,GAAAA,GAAH,uHASXE,EAAYF,EAAAA,GAAAA,GAAH,mG,SCfTG,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACP,EAAD,UACGK,EAAOG,KAAI,SAAAC,GAAK,OACf,SAACP,EAAD,WACE,UAAC,KAAD,CAAMQ,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAAhD,WACE,gBACEQ,IACEL,EAAMM,YAAN,yCACsCN,EAAMM,aACxC,4DAENC,IAAKP,EAAMQ,MACXC,MAAM,SAER,SAACf,EAAD,UAAYM,EAAMQ,YAXJR,EAAME,GADT,KAkBtB,C,0KCnBc,SAASQ,IACtB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOf,EAAP,KAAegB,EAAf,KACA,GAA4BD,EAAAA,EAAAA,WAAS,GAArC,eAAOE,EAAP,KAAeC,EAAf,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAEyBC,EAAAA,EAAAA,MAFzB,UAG0B,KADhBpB,EAFV,QAGeqB,OAHf,0CAIaC,EAAAA,EAAAA,IAAM,2BAJnB,OAMIN,EAAUhB,GANd,gDAQIuB,QAAQC,IAAR,MARJ,yBAUIN,GAAU,GAVd,6EADc,uBAAC,WAAD,wBAcdO,EACD,GAAE,KAGD,6BACE,2CACCzB,IAAU,SAAC,IAAD,CAAYA,OAAQA,IAC9BiB,IAAU,SAAC,IAAD,MAGhB,C,mMClCKS,EAAW,gCACXC,EAAU,mCAEHP,EAAgB,mCAAG,oGACPQ,EAAAA,EAAAA,IAAA,UAAaF,EAAb,sBAA2C,CAChEG,OAAQ,CACNC,QAASH,EACTI,SAAU,WAJgB,cACxBC,EADwB,yBAOvBA,EAASC,KAAKC,SAPS,2CAAH,qDAUhBC,EAAiB,mCAAG,WAAM7B,GAAN,uFACRsB,EAAAA,EAAAA,IAAA,UAAaF,EAAb,iBAA8BpB,GAAM,CACzDuB,OAAQ,CACNC,QAASH,EACTI,SAAU,WAJiB,cACzBC,EADyB,yBAOxBA,EAASC,MAPe,2CAAH,sDAUjBG,EAAiB,mCAAG,WAAM9B,GAAN,uFACRsB,EAAAA,EAAAA,IAAA,UAAaF,EAAb,iBAA8BpB,EAA9B,YAA4C,CACjEuB,OAAQ,CACNC,QAASH,EACTI,SAAU,WAJiB,cACzBC,EADyB,yBAOxBA,EAASC,KAAKI,MAPU,2CAAH,sDAUjBC,EAAiB,mCAAG,WAAMhC,GAAN,uFACRsB,EAAAA,EAAAA,IAAA,UAAaF,EAAb,iBAA8BpB,EAA9B,YAA4C,CACjEuB,OAAQ,CACNC,QAASH,EACTI,SAAU,WAJiB,cACzBC,EADyB,yBAOxBA,EAASC,KAAKC,SAPU,2CAAH,sDAUjBK,EAAgB,mCAAG,WAAMC,GAAN,uFACPZ,EAAAA,EAAAA,IAAA,UAAaF,EAAb,gBAAqC,CAC1DG,OAAQ,CACNC,QAASH,EACTI,SAAU,QACVS,MAAOA,KALmB,cACxBR,EADwB,yBAQvBA,EAASC,KAAKC,SARS,2CAAH,qD","sources":["components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","pages/Home/Home.jsx","services/movieApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 200px);\n  justify-content: center;\n  gap: 20px;\n  padding: 20px 0;\n`;\n\nexport const CardWrapper = styled.li`\n  border: 1px solid black;\n  border-radius: 4px;\n\n  > a {\n    text-decoration: none;\n  }\n`;\n\nexport const MovieName = styled.h3`\n  padding: 4px;\n  margin-top: 8px;\n  margin-bottom: 0;\n  color: black;\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { List, CardWrapper, MovieName } from './MovieList.styled';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {movies.map(movie => (\n        <CardWrapper key={movie.id}>\n          <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n            <img\n              src={\n                movie.poster_path\n                  ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n                  : 'https://via.placeholder.com/300x500?text=Poster+Not+Found'\n              }\n              alt={movie.title}\n              width=\"200\"\n            />\n            <MovieName>{movie.title}</MovieName>\n          </Link>\n        </CardWrapper>\n      ))}\n    </List>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      poster_path: PropTypes.string,\n      title: PropTypes.string,\n    }).isRequired\n  ).isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\n\nimport { Loader } from 'components/Loader/Loader';\n\nimport { fetchTrendMovies } from 'services/movieApi';\nimport { MoviesList } from 'components/MovieList/MovieList';\n\nexport default function Home() {\n  const [movies, setMovies] = useState([]);\n  const [loader, setLoader] = useState(true);\n\n  useEffect(() => {\n    async function fetchMoviesList() {\n      try {\n        const movies = await fetchTrendMovies();\n        if (movies.length === 0) {\n          return toast('Sorry, try again later');\n        }\n        setMovies(movies);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoader(false);\n      }\n    }\n    fetchMoviesList();\n  }, []);\n\n  return (\n    <main>\n      <h1>Trending today</h1>\n      {movies && <MoviesList movies={movies} />}\n      {loader && <Loader />}\n    </main>\n  );\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '2f44dbe234f7609a16da7327d83f3eb3';\n\nexport const fetchTrendMovies = async () => {\n  const response = await axios.get(`${BASE_URL}trending/movie/day`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async id => {\n  const response = await axios.get(`${BASE_URL}movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data;\n};\n\nexport const fetchMovieCredits = async id => {\n  const response = await axios.get(`${BASE_URL}movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data.cast;\n}\n\nexport const fetchMovieReviews = async id => {\n  const response = await axios.get(`${BASE_URL}movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data.results;\n}\n\nexport const fetchSearchMovie = async query => {\n  const response = await axios.get(`${BASE_URL}search/movie`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      query: query,\n    },\n  });\n  return response.data.results;\n}\n"],"names":["List","styled","CardWrapper","MovieName","MoviesList","movies","location","useLocation","map","movie","to","id","state","from","src","poster_path","alt","title","width","Home","useState","setMovies","loader","setLoader","useEffect","fetchTrendMovies","length","toast","console","log","fetchMoviesList","BASE_URL","API_KEY","axios","params","api_key","language","response","data","results","fetchMovieDetails","fetchMovieCredits","cast","fetchMovieReviews","fetchSearchMovie","query"],"sourceRoot":""}